{"version":3,"file":"tf-backend-cpu.min.js","sources":["../src/cpu_util.ts","../src/backend_cpu.ts","../src/kernels/Abs.ts","../src/utils/binary_impl.ts","../src/kernels/Complex.ts","../src/kernels/Identity.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/utils/kernel_utils.ts","../src/kernels/Add.ts","../src/utils/unary_impl.ts","../src/utils/unary_utils.ts","../src/kernels/Ceil.ts","../src/kernels/Exp.ts","../src/kernels/Expm1.ts","../src/kernels/Floor.ts","../src/kernels/Log.ts","../src/kernels/Max_impl.ts","../src/kernels/Multiply.ts","../src/kernels/NotEqual.ts","../src/kernels/Rsqrt.ts","../src/kernels/Slice.ts","../src/kernels/SquaredDifference.ts","../src/kernels/Sub.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Unique_impl.ts","../src/base.ts","../src/kernels/Elu.ts","../src/kernels/Prelu.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/utils/fused_utils.ts","../src/kernels/Reshape.ts","../src/kernels/BatchMatMul.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atanh.ts","../src/utils/pool_utils.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPoolBackprop.ts","../src/kernels/BatchNorm.ts","../src/kernels/Clip.ts","../src/kernels/Imag.ts","../src/kernels/Concat.ts","../src/kernels/Conv2D.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/kernels/Div.ts","../src/kernels/Erf.ts","../src/utils/fft_utils.ts","../src/kernels/FFT.ts","../src/kernels/Fill.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalNot.ts","../src/kernels/Max.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPoolBackprop.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/MirrorPad.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/PadV2.ts","../src/kernels/Reciprocal.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Selu.ts","../src/kernels/Sigmoid.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/Transpose.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/Step.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/register_all_kernels.ts","../src/kernels/Unique.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendTimingInfo, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, max, NumericDataType, Rank, Scalar, ShapeMap, slice_util, Tensor, Tensor1D, Tensor2D, Tensor4D, Tensor5D, TensorBuffer, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): void {\n    this.data.set(dataId, {values, dtype, refCount: 1});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  private bufferSync<R extends Rank>(t: Tensor<R>): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return tf.buffer(t.shape, t.dtype, decodedData) as TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId);\n        this.disposeData(complexTensorInfos.imag.dataId);\n      }\n\n      this.data.delete(dataId);\n    }\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    const dataId = tensorInfo.dataId;\n\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n\n      tensorData.refCount--;\n\n      if (tensorData.refCount < 1) {\n        this.disposeData(dataId);\n      }\n    }\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    assertNotComplex(x, 'stridedSlice');\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tf.tensor([], outShape) as T;\n    }\n\n    const buffer = tf.buffer(outShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; i++) {\n      const loc = buffer.indexToLoc(i);\n\n      const newLoc: number[] = new Array(loc.length);\n      for (let j = 0; j < newLoc.length; j++) {\n        newLoc[j] = loc[j] * strides[j] + begin[j];\n      }\n      buffer.set(xBuf.get(...newLoc), ...loc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  diag(x: Tensor): Tensor {\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const buffer = tf.buffer([x.size, x.size], x.dtype);\n    const vals = buffer.values;\n    for (let i = 0; i < xVals.length; i++) {\n      vals[i * x.size + i] = xVals[i];\n    }\n    return buffer.toTensor();\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = tf.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    assertNotComplex(x, 'reverse');\n\n    const buffer = tf.buffer(x.shape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < buffer.size; i++) {\n      const outLoc = buffer.indexToLoc(i);\n      const inLoc = outLoc.slice();\n      axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n      buffer.set(xBuf.get(...inLoc), ...outLoc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'neg');\n\n    // TODO(lina128): Use mul directly once neg is modularized.\n    return tf.mul(tf.scalar(-1), x);\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    assertNotComplex(tensors, 'addN');\n\n    const vals = tensors.map(t => this.readSync(t.dataId) as TypedArray);\n    const result = tf.buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n    const resultVals = result.values;\n    for (let i = 0; i < tensors.length; i++) {\n      const currVals = vals[i];\n      for (let j = 0; j < resultVals.length; j++) {\n        resultVals[j] += currVals[j];\n      }\n    }\n    return result.toTensor() as T;\n  }\n\n  softmax<T extends Tensor>(logits: T, dim: number): T {\n    const axes = util.parseAxisParam([dim], logits.shape);\n    // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n    // modularization.\n    const maxLogit = max(logits, axes);\n    const expandedShape =\n        backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n    // TODO(lina128): Use sub directly once softmax is modularized.\n    const a = tf.sub(logits, maxLogit.reshape(expandedShape));\n    const b = tf.exp(a);\n    const sumExp = this.sum(b, axes).reshape(expandedShape);\n\n    // TODO(annxingyuan): Call divImpl rather than op as part of softmax\n    // kernel modularization.\n    return tf.div(b, sumExp);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    assertNotComplex([a, b], 'pow');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue)) as\n        T;\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'floorDiv');\n\n    const op = (a: number, b: number) => Math.floor(a / b);\n    const outputDtype = 'int32';\n    return this.broadcastedBinaryOp(a, b, outputDtype, op);\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let sum = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        sum += aVals[offset + j];\n      }\n      vals[i] = sum;\n    }\n    return result;\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let prod = 1;\n      for (let j = 0; j < reduceSize; ++j) {\n        prod *= aVals[offset + j];\n      }\n      vals[i] = prod;\n    }\n    return result;\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    assertNotComplex(x, 'unsortedSegmentSum');\n\n    const res = [];\n\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = x.rank - segmentIds.rank;\n    for (let i = 0; i < numIters; ++i) {\n      segmentIds = segmentIds.expandDims(i + 1);\n    }\n\n    for (let i = 0; i < numSegments; ++i) {\n      const segmentId = tf.scalar(i, 'int32');\n      const mask = tf.equal(segmentId, segmentIds).asType('float32');\n      const sum = mask.mul(x).sum(0);\n      res.push(sum);\n    }\n\n    return tf.stack(res);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMin');\n\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      let minIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n          minIndex = j;\n        }\n      }\n      vals[i] = minIndex;\n    }\n    return result;\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMax');\n\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let max = aVals[offset];\n      let maxIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value > max) {\n          max = value;\n          maxIndex = j;\n        }\n      }\n      vals[i] = maxIndex;\n    }\n    return result;\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    assertNotComplex(x, 'cumsum');\n\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(x.shape, resultDtype);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    const finalDim = x.shape[x.rank - 1];\n    const indexAdjuster = reverse ?\n        (i: number, j: number) => i + finalDim - j - 1 :\n        (i: number, j: number) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n      for (let j = 0; j < finalDim; j++) {\n        const idx = indexAdjuster(i, j);\n        if (j === 0) {\n          vals[idx] = exclusive ? 0 : aVals[idx];\n        } else {\n          const prevIdx = indexAdjuster(i, j - 1);\n          vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                  aVals[idx] + vals[prevIdx];\n        }\n      }\n    }\n    return result;\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'equal');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal === bVal) ? 1 : 0;\n    });\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'notEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal !== bVal) ? 1 : 0;\n    });\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'less');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal < bVal) ? 1 : 0;\n    });\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'lessEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal <= bVal) ? 1 : 0;\n    });\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greater');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal > bVal) ? 1 : 0;\n    });\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greaterEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal >= bVal) ? 1 : 0;\n    });\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalAnd');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal && bVal;\n    });\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalOr');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal || bVal;\n    });\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([condition, a, b], 'select');\n\n    const values = this.readSync(condition.dataId) as TypedArray;\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n    const newValues = this.readSync(result.dataId) as TypedArray;\n    let index = 0;\n    const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n        1 :\n        util.sizeFromShape(a.shape.slice(1));\n\n    for (let i = 0; i < values.length; i++) {\n      for (let j = 0; j < offset; j++) {\n        if (values[i] === 1) {\n          newValues[index++] = aValues[i];\n        } else {\n          newValues[index++] = bValues[i];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    assertNotComplex(x, 'topk');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'min');\n\n    backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n        }\n      }\n      vals[i] = min;\n    }\n    return result;\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'minimum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'mod');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const rem = aVal % bVal;\n      if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n        return rem;\n      } else {\n        return (rem + bVal) % bVal;\n      }\n    });\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'maximum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'all');\n\n    backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let all = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        all = all && value;\n      }\n      vals[i] = all;\n    }\n    return result;\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'any');\n\n    backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let anyVal = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        anyVal = anyVal || value;\n      }\n      vals[i] = anyVal;\n    }\n    return result;\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'squaredDifference');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const diff = aVal - bVal;\n      return diff * diff;\n    });\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    assertNotComplex([dy, y], 'eluDer');\n\n    const resultValues = new Float32Array(y.size);\n    const values = this.readSync(y.dataId) as TypedArray;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 1) {\n        resultValues[i] = dyValues[i];\n      } else {\n        resultValues[i] = dyValues[i] * (v + 1);\n      }\n    }\n    return this.makeOutput(resultValues, y.shape, 'float32');\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    assertNotComplex([a, b], 'atan2');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue)) as\n        T;\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    assertNotComplex(x, 'tile');\n    return tile(this.bufferSync(x), reps) as T;\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    assertNotComplex([x, indices], 'gather');\n\n    const newShape: number[] = x.shape.slice();\n    const indicesValues = this.readSync(indices.dataId) as TypedArray;\n    newShape[axis] = indicesValues.length;\n    const result = tf.buffer(newShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < result.size; ++i) {\n      const newLoc = result.indexToLoc(i);\n\n      const originalLoc: number[] = newLoc.slice();\n      originalLoc[axis] = indicesValues[newLoc[axis]];\n\n      const originalIndex = xBuf.locToIndex(originalLoc);\n      result.values[i] = xBuf.values[originalIndex];\n    }\n    return result.toTensor() as T;\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    assertNotComplex([x], 'batchToSpaceND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return tf.transpose(x.reshape(reshaped), permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  private pool3d(\n      x: Tensor5D, convInfo: backend_util.Conv3DInfo,\n      poolType: 'max'|'avg'): Tensor5D {\n    assertNotComplex(x, 'pool3d');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const initialValue =\n        (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                              Number.POSITIVE_INFINITY);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = tf.buffer(convInfo.outShape, x.dtype);\n    const outputVals = output.values;\n\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n        convInfo.outShape[3] * convInfo.outShape[4];\n    const outputDepthStrides =\n        convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n    const outputColStrides = convInfo.outShape[4];\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      const outputBatchOffset = batch * outputBatchStrides;\n      const inputBatchOffset = batch * x.strides[0];\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          const outputDepthOffset =\n              outputBatchOffset + yDepth * outputDepthStrides;\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n              // Shader code begins\n              const outputColOffset = outputRowOffset + yCol * outputColStrides;\n              let minMaxValue = initialValue;\n              let avgValue = 0;\n              let count = 0;\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const xColOffset = xRowOffset + xCol * x.strides[3];\n                    const pixel = xValues[xColOffset + channel];\n                    if ((poolType === 'max' && pixel > minMaxValue)) {\n                      minMaxValue = pixel;\n                    } else if (poolType === 'avg') {\n                      avgValue += pixel;\n                      count++;\n                    }\n                    if (isNaN(minMaxValue)) {\n                      break;\n                    }\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              const outputOffset = outputColOffset + channel;\n              outputVals[outputOffset] =\n                  poolType === 'avg' ? avgValue / count : minMaxValue;\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor5D;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'avgPool3d');\n\n    return this.pool3d(x, convInfo, 'avg').toFloat();\n  }\n\n  avgPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex([dy, x], 'avgPool3dBackprop');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R5>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins.\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel;\n                  }\n                }\n              }\n              dx.set(\n                  dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol,\n                  channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'maxPool3d');\n\n    return this.pool3d(x, convInfo, 'max').toFloat();\n  }\n\n  private maxPool3dPositions(x: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const maxPositions = tf.buffer(convInfo.outShape, 'int32');\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const xBuf = this.bufferSync(x);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n              // Shader code begins\n              let maxValue = Number.NEGATIVE_INFINITY;\n              let maxPosition = -1;\n\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const wDepth = xDepth - xDepthCorner;\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const wRow = xRow - xRowCorner;\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const wCol = xCol - xColCorner;\n                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                    if (pixel >= maxValue) {\n                      maxValue = pixel;\n                      maxPosition = wDepth * effectiveFilterHeight *\n                              effectiveFilterWidth +\n                          wRow * effectiveFilterHeight + wCol;\n                    }\n                  }\n                }\n              }\n\n              maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return maxPositions.toTensor() as Tensor5D;\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex([x, y], 'maxPool3dBackprop');\n\n    const maxPositions = this.maxPool3dPositions(x, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R5>(x.shape, 'float32');\n\n    const maxPosBuf = this.bufferSync(maxPositions);\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const maxPos = effectiveFilterDepth *\n                            effectiveFilterHeight * effectiveFilterWidth -\n                        1 -\n                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    const curPos =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterWidth + wCol;\n\n                    const mask = maxPos === curPos ? 1 : 0;\n                    if (mask === 0) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel * mask;\n                  }\n                }\n              }\n              dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeBilinear');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result = new Float32Array(\n        util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    let outputIdx = 0;\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n    for (let b = 0; b < batch; b++) {\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceRowFloor = Math.floor(sourceFracRow);\n        const rowFrac = sourceFracRow - sourceRowFloor;\n        const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n        const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n        const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceColFloor = Math.floor(sourceFracCol);\n          const colFrac = sourceFracCol - sourceColFloor;\n          const sourceColCeil =\n              Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n          const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n          const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n          const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n          const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n\n            // Compute the fractional index of the source.\n            const topLeft = xValues[topLeftOffest + d];\n            const bottomLeft = xValues[botLeftOffset + d];\n            const topRight = xValues[topRightOffset + d];\n            const bottomRight = xValues[botRightOffest + d];\n\n            const top = topLeft + (topRight - topLeft) * colFrac;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n            const newValue = top + (bottom - top) * rowFrac;\n\n            result[outputIdx++] = newValue;\n          }\n        }\n      }\n    }\n    return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeBilinearBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass and add the\n    // corresponding coefficient from dy to the gradient (with some\n    // interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    let offset = 0;\n    for (let b = 0; b < batch; b++) {\n      const bOffset = b * x.strides[0];\n      for (let r = 0; r < yHeight; r++) {\n        const dxR = r * heightScale;\n        const topDxRIndex = Math.floor(dxR);\n        const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n        const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n        const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n\n        const dxRLerp = dxR - topDxRIndex;\n        const inverseDxRLerp = 1.0 - dxRLerp;\n        for (let c = 0; c < yWidth; c++) {\n          const dxC = c * widthScale;\n          const leftDxCIndex = Math.floor(dxC);\n          const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n          const dxCLerp = dxC - leftDxCIndex;\n          const inverseDxCLerp = 1.0 - dxCLerp;\n\n          const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n          const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n          const bottomLeftRCOffset =\n              bottomDxROffset + leftDxCIndex * x.strides[2];\n          const bottomRightRCOffset =\n              bottomDxROffset + rightDxCIndex * x.strides[2];\n\n          const inverseDxRLerpTimesInverseDxCLerp =\n              inverseDxRLerp * inverseDxCLerp;\n          const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n          const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n          const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n          for (let d = 0; d < depth; d++) {\n            const dyVal = dyValues[offset++];\n            output[topLeftRCOffset + d] +=\n                dyVal * inverseDxRLerpTimesInverseDxCLerp;\n            output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n            output[bottomLeftRCOffset + d] +=\n                dyVal * dxRLerpTimesInverseDxCLerp;\n            output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n          }\n        }\n      }\n    }\n    return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeNearestNeighbor');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n\n    let outputOffset = 0;\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceNearestRow = Math.min(\n            oldHeight - 1,\n            alignCorners ? Math.round(sourceFracRow) :\n                           Math.floor(sourceFracRow));\n        const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceNearestCol = Math.min(\n              oldWidth - 1,\n              alignCorners ? Math.round(sourceFracCol) :\n                             Math.floor(sourceFracCol));\n          const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n            // Compute the fractional index of the source.\n            const newVal = xValues[colOffset + d];\n            output[outputOffset++] = newVal;\n          }\n        }\n      }\n    }\n    return tf.tensor(\n        output, [batch, newHeight, newWidth, numChannels], x.dtype);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    // Loop over the output space.\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < xHeight; r++) {\n        const rowOffset = batchOffset + r * x.strides[1];\n\n        // Compute bounds for where in dy we will look\n        const startRLerp = Math.floor(r * invHeightScale);\n        const startDyR = Math.floor(startRLerp - (winHeight / 2));\n        for (let c = 0; c < xWidth; c++) {\n          const colOffset = rowOffset + c * x.strides[2];\n\n          // Compute bounds for where in dy we will look\n          const startCLerp = Math.floor(c * invWidthScale);\n          const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n          for (let d = 0; d < depth; d++) {\n            let accum = 0;\n            // loop over dy\n\n            for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n              const dyR = dyRIndex + startDyR;\n              // Guard against the window exceeding the bounds of dy\n              if (dyR < 0 || dyR >= yHeight) {\n                continue;\n              }\n\n              const dyROffset = batchOffset + dyR * dy.strides[1];\n              const sourceFracRow = dyR * heightScale;\n              const sourceNearestRow = Math.min(\n                  xHeight - 1,\n                  alignCorners ? Math.round(sourceFracRow) :\n                                 Math.floor(sourceFracRow));\n              if (r !== sourceNearestRow) {\n                continue;\n              }\n              for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                const dyC = dyCIndex + startDyC;\n                // Guard against the window exceeding the bounds of dy\n                if (dyC < 0 || dyC >= yWidth) {\n                  continue;\n                }\n\n                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                const sourceFracCol = dyC * widthScale;\n                const sourceNearestCol = Math.min(\n                    xWidth - 1,\n                    alignCorners ? Math.round(sourceFracCol) :\n                                   Math.floor(sourceFracCol));\n\n                if (c === sourceNearestCol) {\n                  accum += dyValues[dyCOffset + d];\n                }\n              }\n            }\n            output[colOffset + d] = accum;\n          }\n        }\n      }\n    }\n    return tf.tensor4d(output, x.shape, x.dtype);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(x, 'localResponseNormalization4D');\n\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const size = x.size;\n    const result = new Float32Array(size);\n\n    function sumAcrossChannels(offset: number) {\n      const currentChannel = offset % channels;\n      let beginSumOffset =\n          offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n      const endSumOffset = offset - currentChannel +\n          Math.min(currentChannel + depthRadius, maxD);\n\n      let sum = 0.0;\n      for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n        const z = xValues[beginSumOffset];\n        sum += z * z;\n      }\n      return sum;\n    }\n\n    for (let offset = 0; offset < size; offset++) {\n      const sum = sumAcrossChannels(offset);\n      const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n      result[offset] = val;\n    }\n\n    return tf.tensor4d(result, x.shape);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(dy, 'LRNGrad');\n    const channels = dy.shape[3];\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const inputImageValues = this.readSync(inputImage.dataId) as TypedArray;\n    const outputImageValues = this.readSync(outputImage.dataId) as TypedArray;\n    const result = new Float32Array(dy.size);\n    const size = dy.size;\n\n    for (let offset = 0; offset < size; offset++) {\n      const currentChannel = offset % channels;\n      const depthBegin =\n          (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n      const depthEnd = (offset - currentChannel) +\n          Math.min(channels, currentChannel + depthRadius + 1);\n\n      let norm = 0;\n      for (let k = depthBegin; k < depthEnd; k++) {\n        norm += Math.pow(inputImageValues[k], 2);\n      }\n      norm = alpha * norm + bias;\n\n      for (let k = depthBegin; k < depthEnd; k++) {\n        let dyi = -2 * alpha * beta * inputImageValues[k] *\n            outputImageValues[offset] / norm;\n        if (offset === k) {\n          dyi += Math.pow(norm, -beta);\n        }\n        dyi *= dyValues[offset];\n        result[k] += dyi;\n      }\n    }\n    return tf.tensor4d(result, dy.shape);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    assertNotComplex(logits, 'multinomial');\n\n    const probabilities = normalized ? logits : tf.softmax(logits);\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const res = tf.zeros<Rank.R2>([batchSize, numSamples], 'int32');\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const probVals = this.readSync(probabilities.dataId) as TypedArray;\n\n    for (let b = 0; b < batchSize; ++b) {\n      const offset = b * numEvents;\n      // The cdf won't include the last event. It will be implicit if no other\n      // event happened.\n      const cdf = new Float32Array(numEvents - 1);\n      cdf[0] = probVals[offset];\n      for (let event = 1; event < cdf.length; ++event) {\n        cdf[event] = cdf[event - 1] + probVals[offset + event];\n      }\n\n      const random = seedrandom.alea(seed.toString());\n      const outOffset = b * numSamples;\n      for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n        const r = random();\n\n        // Assume last event happened by default.\n        resVals[outOffset + sampleId] = cdf.length;\n\n        for (let event = 0; event < cdf.length; event++) {\n          if (r < cdf[event]) {\n            resVals[outOffset + sampleId] = event;\n            break;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    assertNotComplex(indices, 'oneHot');\n\n    const res = new Float32Array(indices.size * depth);\n    res.fill(offValue);\n    const indicesVal = this.readSync(indices.dataId) as TypedArray;\n\n    for (let event = 0; event < indices.size; ++event) {\n      if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n        res[event * depth + indicesVal[event]] = onValue;\n      }\n    }\n    return tf.tensor2d(res, [indices.size, depth], 'int32');\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold: number): Tensor1D {\n    assertNotComplex(boxes, 'nonMaxSuppression');\n\n    const boxesVals = this.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = this.readSync(scores.dataId) as TypedArray;\n    return nonMaxSuppressionV3Impl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n            dataFormat}`);\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result =\n        new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n      for (let h = 0; h < outputHeight; ++h) {\n        const inH = Math.floor(h / blockSize);\n        const offsetH = (h % blockSize);\n        for (let w = 0; w < outputWidth; ++w) {\n          const inW = Math.floor(w / blockSize);\n          const offsetW = (w % blockSize);\n          const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n          for (let d = 0; d < outputDepth; ++d) {\n            const inD = d + offsetD;\n            const inputIdx =\n                inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n            result[outputIdx++] = xValues[inputIdx];\n          }\n        }\n      }\n    }\n    return tf.tensor4d(\n        result, [batchSize, outputHeight, outputWidth, outputDepth]);\n  }\n\n  private broadcastedBinaryOp(\n      a: Tensor, b: Tensor, dtype: DataType,\n      op: (a: number, b: number) => number): Tensor {\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const result = tf.buffer(newShape, dtype);\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n\n    const resVals = result.values;\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resVals.length; ++i) {\n        resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      const aBuf = this.bufferSync(a);\n      const bBuf = this.bufferSync(b);\n      for (let i = 0; i < resVals.length; ++i) {\n        const loc = result.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bBuf.locToIndex(bLoc);\n\n        resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n    return result.toTensor();\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n\n  cropAndResize(\n      images: Tensor4D,\n      boxes: Tensor2D,\n      boxIndex: Tensor1D,\n      cropSize: [number, number],\n      method: string,\n      extrapolationValue: number,\n  ) {\n    const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n    const numBoxes = boxes.shape[0];\n\n    const [cropHeight, cropWidth] = cropSize;\n    const output =\n        tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n    const boxVals = this.readSync(boxes.dataId) as TypedArray;\n    const boxIndVals = this.readSync(boxIndex.dataId) as TypedArray;\n    const imageVals = this.readSync(images.dataId) as TypedArray;\n\n    const inStride = images.strides;   // to calculate flat indexes into image\n    const outStride = output.strides;  // to calculate flat indexes into output\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n      const startInd = b * 4;\n      const y1 = boxVals[startInd];\n      const x1 = boxVals[startInd + 1];\n      const y2 = boxVals[startInd + 2];\n      const x2 = boxVals[startInd + 3];\n\n      const bInd: number = boxIndVals[b];\n      if (bInd >= batch) {\n        continue;\n      }\n\n      const heightScale = (cropHeight > 1) ?\n          (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n          0;\n      const widthScale =\n          (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n      for (let y = 0; y < cropHeight; y++) {\n        const yInd: number = (cropHeight > 1) ?\n            y1 * (imageHeight - 1) + y * (heightScale) :\n            0.5 * (y1 + y2) * (imageHeight - 1);\n\n        if (yInd < 0 || yInd > imageHeight - 1) {\n          for (let x = 0; x < cropWidth; x++) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n          }\n          continue;\n        }\n\n        if (method === 'bilinear') {\n          const topInd = Math.floor(yInd);\n          const bottomInd = Math.ceil(yInd);\n          const yLerp = yInd - topInd;\n\n          for (let x = 0; x < cropWidth; x++) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const leftInd = Math.floor(xInd);\n            const rightInd = Math.ceil(xInd);\n            const xLerp = xInd - leftInd;\n\n            for (let c = 0; c < numChannels; c++) {\n              let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topRight = imageVals[ind];\n\n              ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomRight = imageVals[ind];\n\n              const top = topLeft + (topRight - topLeft) * xLerp;\n              const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n              ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = top + ((bottom - top) * yLerp);\n            }\n          }\n        } else {  // method == \"nearest\"\n          for (let x = 0; x < cropWidth; ++x) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const closestX = Math.round(xInd);\n            const closestY = Math.round(yInd);\n            for (let c = 0; c < numChannels; c++) {\n              const inInd = c + closestX * inStride[2] +\n                  closestY * inStride[1] + bInd * inStride[0];\n              const outInd =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[outInd] = imageVals[inInd];\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor4D;\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    return this.scatter(\n        sparseIndices, sparseValues, outputShape, outputSize, sliceSize,\n        numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        backend_util.prepareAndValidate(x, indices);\n    if (numSlices === 0) {\n      return tf.tensor([], resultShape, x.dtype);\n    }\n\n    const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const xData = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < numSlices; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        flattenIndex += dim * strides[j];\n        index.push(dim);\n      }\n      if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${x.shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n      }\n    }\n    return buffer.toTensor().reshape(resultShape);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(updates, indices, shape);\n    const defaultValue = tf.scalar(0);\n    const sumDupeIndices = true;\n    return this.scatter(\n        indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank,\n        strides, defaultValue, sumDupeIndices);\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported for string tensors');\n    } else {\n      // TODO(lina128): Use fill kernel directly once this kernel is\n      // modularized.\n      return tf.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    const values = util.getArrayFromDType(\n                       x.dtype, util.sizeFromShape(x.shape)) as TypedArray;\n    return this.makeOutput(values, x.shape, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  private scatter<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R], outputSize: number,\n      sliceSize: number, numUpdates: number, sliceRank: number,\n      strides: number[], defaultValue: Scalar,\n      sumDupeIndices: boolean): Tensor<R> {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const updatesData = this.readSync(updates.dataId) as TypedArray;\n\n    if (outputSize === 0) {\n      return tf.tensor([], shape, updates.dtype);\n    }\n\n    const buffer = new TensorBuffer(flattenShape, updates.dtype as 'float32');\n    buffer.values.fill((this.readSync(defaultValue.dataId) as TypedArray)[0]);\n\n    for (let i = 0; i < numUpdates; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        index.push(dim);\n        flattenIndex += dim * strides[j];\n      }\n\n      if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        if (sumDupeIndices) {\n          buffer.values[flattenIndex * sliceSize + k] +=\n              updatesData[i * sliceSize + k];\n        } else {\n          buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n              updatesData[0] :\n              updatesData[i * sliceSize + k];\n        }\n      }\n    }\n    return buffer.toTensor().reshape(shape);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  if (x.dtype !== 'complex64') {\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    resultValues = simpleAbsImpl(values);\n  } else {\n    const complexVals = cpuBackend.data.get(x.dataId);\n    const real = complexVals.complexTensorInfos.real;\n    const imag = complexVals.complexTensorInfos.imag;\n    const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n    const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n    for (let i = 0; i < realVals.length; i++) {\n      const real = realVals[i];\n      const imag = imagVals[i];\n      resultValues[i] = Math.hypot(real, imag);\n    }\n  }\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: TypedArray,\n          bVals: TypedArray, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(lina128): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/kernel_utils';\n\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/kernel_utils';\n\nexport const multiplyImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/kernel_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, NumericDataType, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: TypedArray, begin: number[], size: number[], shape: number[],\n    dtype: DataType): TypedArray {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n\n  const outVals = util.getTypedArrayFromDType(dtype as NumericDataType, length);\n  for (let i = 0; i < length; ++i) {\n    const rank = size.length;\n    const strides = util.computeStrides(size);\n    const loc = util.indexToLoc(i, rank, strides);\n    const xLoc = loc.map((idx: number, j) => idx + begin[j]);\n    const xIndex = util.locToIndex(xLoc, shape.length, xStrides);\n    outVals[i] = vals[xIndex];\n  }\n  return outVals;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/kernel_utils';\n\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n  const diff = a - b;\n  return diff * diff;\n}));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/kernel_utils';\n\nexport const subImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes =\n        applyActivation(backend, current, activation, preluActivationWeights);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolBackprop, AvgPoolBackpropAttrs, AvgPoolBackpropInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolBackprop(args: {\n  inputs: AvgPoolBackpropInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolBackpropAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolBackprop');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolBackpropConfig: KernelConfig = {\n  kernelName: AvgPoolBackprop,\n  backendName: 'cpu',\n  kernelFunc: avgPoolBackprop as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return $inputs[0];\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n\n  const outVals = util.getTypedArrayFromDType(\n      $inputs[0].dtype as 'float32', util.sizeFromShape(outShape));\n\n  if (inputs2D[0].shape[0] === 1) {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs2D.forEach(t => {\n      const val = backend.data.get(t.dataId).values as TypedArray;\n      const size = util.sizeFromShape(t.shape);\n\n      outVals.set(val, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs2D.forEach(t => {\n      const tVals = backend.data.get(t.dataId).values as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < t.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < t.shape[1]; ++col) {\n          outVals[resIdx + col] = tVals[tIdx++];\n        }\n      }\n\n      colOffset += t.shape[1];\n    });\n  }\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterAttrs, Conv3DBackpropFilterInputs, Conv3DBackpropFilterV2, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputAttrs, Conv3DBackpropInputInputs, Conv3DBackpropInputV2, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padLeft;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padTop;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Div, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/kernel_utils';\n\nexport const divImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(Div, divImpl);\n\nexport const divConfig: KernelConfig = {\n  kernelName: Div,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {divConfig} from '../kernels/Div';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          divConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          divConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode, activation} =\n      attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result =\n        applyActivation(backend, result, activation, preluActivationWeights);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode, activation} =\n      attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result =\n        applyActivation(backend, result, activation, preluActivationWeights);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Max, MaxAttrs, MaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxInputs;\n    const {reductionIndices, keepDims} = attrs as {} as MaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    let xShape = x.shape;\n    const xRank = xShape.length;\n\n    const origAxes = util.parseAxisParam(reductionIndices, xShape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    if (permutedAxes != null) {\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xShape[permutedAxes[i]];\n      }\n\n      xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n      xShape = newShape;\n    }\n\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xShape, axes);\n\n    const reduceSize = util.sizeFromShape(reduceShape);\n\n    const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n    let outShape = maxOutShape;\n    if (keepDims) {\n      // reshape\n      const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n      outShape = newShape;\n    }\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolBackprop, MaxPoolBackpropAttrs, MaxPoolBackpropInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolBackprop(args: {\n  inputs: MaxPoolBackpropInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolBackpropAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolBackprop');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolBackpropConfig: KernelConfig = {\n  kernelName: MaxPoolBackprop,\n  backendName: 'cpu',\n  kernelFunc: maxPoolBackprop as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {kernel_impls} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {boxes, scores} = inputs as NonMaxSuppressionV4Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n        attrs as unknown as NonMaxSuppressionV4Attrs;\n\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n    const boxesVals = cpuBackend.data.get(boxes.dataId).values as TypedArray;\n    const scoresVals = cpuBackend.data.get(scores.dataId).values as TypedArray;\n\n    const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n        padToMaxOutputSize);\n\n    return [selectedIndices, validOutputs];\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {kernel_impls} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {boxes, scores} = inputs as NonMaxSuppressionV5Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as unknown as NonMaxSuppressionV5Attrs;\n\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n    const boxesVals = cpuBackend.data.get(boxes.dataId).values as TypedArray;\n    const scoresVals = cpuBackend.data.get(scores.dataId).values as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPoolBackpropConfig} from './kernels/AvgPoolBackprop';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {divConfig} from './kernels/Div';\nimport {eluConfig} from './kernels/Elu';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {maxConfig} from './kernels/Max';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPoolBackpropConfig} from './kernels/MaxPoolBackprop';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {padV2Config} from './kernels/PadV2';\nimport {preluConfig} from './kernels/Prelu';\nimport {realConfig} from './kernels/Real';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {subConfig} from './kernels/Sub';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atanhConfig,\n  avgPoolConfig,\n  avgPoolBackpropConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  divConfig,\n  eluConfig,\n  erfConfig,\n  expConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  logConfig,\n  log1pConfig,\n  logicalNotConfig,\n  maxPoolConfig,\n  maxPoolBackpropConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  mirrorPadConfig,\n  multiplyConfig,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  padV2Config,\n  preluConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  subConfig,\n  tanConfig,\n  tanhConfig,\n  transposeConfig,\n  uniqueConfig,\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.7.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","nonMaxSuppressionV3Impl","kernel_impls","split","tile","topkImpl","whereImpl","_super","_this","data","DataStorage","engine","tslib_1.__extends","MathBackendCPU","values","shape","this","firstUse","env","get","backend_util","warn","dataId","set","refCount","outId","length","isString","encodedValues","map","d","encodeString","write","has","numDataIds","readSync","_a","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","decodeString","Error","tf.buffer","makeTensorFromDataId","disposeData","delete","tensorInfo","tensorData","f","start","now","kernelMs","unreliable","reasons","x","begin","end","strides","outShape","slice_util","computeOutShape","some","axis","tf.tensor","buffer","xBuf","bufferSync","i","size","loc","indexToLoc","newLoc","j","toTensor","xVals","vals","num","rank","outIndex","fill","slice","res","tf.slice","reshape","outLoc","inLoc","ax","tf.mul","tf.scalar","tensors","result","resultVals","currVals","logits","dim","axes","parseAxisParam","maxLogit","max","expandedShape","expandShapeToKeepDim","a","tf.sub","b","tf.exp","sumExp","sum","tf.div","broadcastedBinaryOp","aValue","bValue","Math","pow","floor","assertAxesAreInnerMostDims","reduceShape","resultDtype","upcastType","tf.zeros","reduceSize","sizeFromShape","aVals","offset","prod","segmentIds","numSegments","numIters","expandDims","segmentId","tf.equal","asType","mul","push","tf.stack","min","minIndex","value","max_1","maxIndex","exclusive","reverse","finalDim","indexAdjuster","idx","prevIdx","aVal","bVal","condition","aValues","bValues","newValues","index","condVals","k","sorted","rem","all","anyVal","diff","dy","y","resultValues","Float32Array","dyValues","v","makeOutput","atan2","reps","indices","newShape","indicesValues","originalLoc","originalIndex","locToIndex","blockShape","crops","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","tf.transpose","convInfo","poolType","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","padFront","padInfo","front","padTop","top","padLeft","left","initialValue","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","xValues","output","outputVals","outputBatchStrides","outputDepthStrides","outputRowStrides","outputColStrides","batch","batchSize","outputBatchOffset","inputBatchOffset","channel","inChannels","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","outHeight","xRowCorner","xRowMin","xRowMax","inHeight","outputRowOffset","yCol","outWidth","xColCorner","xColMin","xColMax","inWidth","outputColOffset","minMaxValue","avgValue","count","xDepth","xDepthOffset","xRow","xRowOffset","xCol","pixel","isNaN","pool3d","toFloat","filterDepth","filterHeight","filterWidth","dx","avgMultiplier","dyBuf","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","maxPositions","maxValue","maxPosition","maxPool3dPositions","maxPosBuf","mask","newHeight","newWidth","alignCorners","oldHeight","oldWidth","numChannels","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","r","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","ceil","topRowOffset","botRowOffset","c","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","topLeft","bottomLeft","top_1","newValue","xHeight","xWidth","depth","_b","yHeight","yWidth","effectiveXSize","effectiveYSize","heightScale","widthScale","bOffset","dxR","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","dxC","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","tf.tensor4d","outputOffset","batchOffset","rowOffset","round","colOffset","newVal","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyR","dyROffset","dyCIndex","dyC","dyCOffset","depthRadius","bias","alpha","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","val","inputImage","outputImage","inputImageValues","outputImageValues","depthBegin","depthEnd","norm","dyi","normalized","numSamples","seed","probabilities","tf.softmax","numEvents","resVals","probVals","cdf","event_1","random","seedrandom.alea","toString","outOffset","sampleId","event_2","onValue","offValue","indicesVal","event_3","tf.tensor2d","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","blockSize","dataFormat","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","h","inH","offsetH","w","inW","offsetD","inputIdx","op","assertAndGetBroadcastShape","bVals","aBroadcastDims","getBroadcastDims","bBroadcastDims","aBuf","bBuf","aLoc","aIndex","bLoc","bIndex","sizeSplits","epsilon","images","boxIndex","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topRight","top_2","bottom","closestX","closestY","inInd","outInd","sparseIndices","sparseValues","outputShape","defaultValue","sliceRank","numUpdates","outputSize","scatter","indicesShape","resultShape","numSlices","TensorBuffer","indicesData","xData","flattenIndex","updates","tf.fill","getArrayFromDType","stop","linspaceImpl","sumDupeIndices","flattenShape","updatesData","KernelBackend","simpleAbsImpl","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","cpuBackend","backend","complexVals","realVals","imagVals","real_1","imag_1","hypot","createSimpleBinaryKernelImpl","aShape","bShape","resultRank","resultStrides","computeStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","complex","inputs","complexInfo","makeTensorInfo","complexConfig","Complex","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensor","floatX","dispose","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","Int32Array","from","zero","toTypedArray","resultData","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","$dtype","_c","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","_d","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","createSimpleUnaryImpl","unaryKernelFunc","xSize","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","Ceil","ceilConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","Floor","floorConfig","logImpl","log","Log","logConfig","maxImpl","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","notEqualImpl","notEqual","NotEqual","notEqualConfig","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","sliceImpl","isContinous","isSliceContinous","xStrides","flatOffset","computeFlatOffset","subarray","outVals","xLoc","xIndex","$begin","$size","assertParamsValid","sliceConfig","Slice","squaredDifferenceImpl","squaredDifference","SquaredDifference","squaredDifferenceConfig","subImpl","subComplexImpl","sub","Sub","subConfig","transposeImpl","xShape","perm","xRank","newStrides","i_1","uniqueImpl","$axis","uniqueElements","inputBuffer","uniqueIndices","is1DTensor","element","axisValues","m","n","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","outputValues","elu","Elu","eluConfig","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","$shape","inferFromImplicitShape","$xSize","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","bi","i0","j0","k0","iBlock","jBlock","kBlock","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","current","addRes","activationRes","intermediates","intermediates_1","_i","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atanh","Atanh","atanhConfig","pool","yR","xRCorner","xRMin","xRMax","yC","xCCorner","xCMin","xCMax","xR","xROffset","xC","maxPoolPositions","flattenPositions","includeBatchInIndex","wR","wC","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","arraysEqual","inShape","strides_1","avgPoolBackpropConfig","AvgPoolBackprop","dyData","dyRCorner","dyCCorner","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","clip","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipConfig","imagVal","imagConfig","Imag","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","inputs2D","innerSize","offset_1","colOffset_1","tVals","tIdx","row","resIdx","col","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","leftPad","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","inputShape","dyStrides","dxValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","trunc","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","dilation2dConfig","Dilation2D","filterVals","filterRank","outSize","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","filterIndex","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","$x","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","divImpl","div","Div","divConfig","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","sign","erfConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","input_1","getComplexWithIndex","$realInfo","$imagInfo","fftImpl","inputSize","fftRadix2","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","e","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","realInfo","imagInfo","sizeInfo","createScalarValue","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","real_2","imag_2","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","fillConfig","Fill","inferDtype","fillValues","flipLeftRightConfig","FlipLeftRight","image","batchIdx","coordX","outIdx","outputValue","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","oldResult","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","log1p","Log1p","log1pConfig","logicalNot","LogicalNot","logicalNotConfig","maxConfig","Max","reductionIndices","keepDims","origAxes","permutedAxes","getAxesPermutation","getInnerMostAxes","maxOutShape","maxPoolConfig","MaxPool","maxPoolBackpropConfig","MaxPoolBackprop","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","maxPools","pooled","indexes","pooledDataId","indexesDataId","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","padV2Config","PadV2","constantValue","outCoords","reciprocal","Reciprocal","reciprocalConfig","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","sigmoid","Sigmoid","sigmoidConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","transpose","transposeConfig","Transpose","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","Sqrt","sqrtConfig","squareConfig","Square","step","Step","stepAttrs","NaN","stepConfig","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","uniqueConfig","Unique","kernelConfigs_1","kernelConfig","registerKernel"],"mappings":"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AChX,EAAQlJ,QAAS,QAASkJ,WDqK3B0iC,GA3FW,CACpCve,GACAhP,EACA0P,GACAG,GACArK,EACAwK,GACAG,GACAG,GACAG,GACAkB,GACAU,GACAvD,GACA4D,GACArP,EACA4C,EACAgO,GACAnS,EACA0T,GACAiC,GACAW,GACAb,GACAmC,GACAmB,GACA9B,GACAwC,GACAG,GACAK,GACAE,GACAI,GACAE,GACAyB,GACAV,GACAiB,GACApT,GACAoU,GACAlZ,EACAI,EACA6d,GACAK,GACAI,GACAne,EACA0e,GACAG,GACAvjB,EACA0jB,GACAzR,GACA6R,GACAI,GACAE,GACAtf,EACAyf,GACAG,GACAU,GACAE,GACAE,GACAb,GACAoB,GACA3gB,EACAkhB,GACAI,GACAlhB,GACAqhB,GACAxd,GACAjJ,EACA+mB,GACA1d,GACAG,GACAO,GACAid,GACAa,GACApiB,GACA0iB,GACAG,GACAE,GACAE,GACAG,GACAtiB,GACA6iB,GACAI,GACAS,GACAC,GACAtjB,GACA4jB,GACAvjB,GACA0jB,GACAG,GACAxB,GACAyB,IAGyB9d,aAAAA,KAAe,CAArC,IAAMie,UACTC,iBAAeD,iDExMD"}